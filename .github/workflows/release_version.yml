name: Release Version

env:
  PHP_VERSION: 8.2
  COMPOSER_VERSION: 2.1

on:
  push:
    branches:
      - main  # Puedes onfigurar para que solo se ejecute al hacer push a la rama principal (o la que prefieras)
  workflow_dispatch:
    
jobs:
  release:
    name: Build and Release Package
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, curl  # Agregarlas extensiones necesarias para tu proyecto
    
    - name: Install Composer
      run: |
        curl -sS https://getcomposer.org/installer | php
        sudo mv composer.phar /usr/local/bin/composer

    - name: Install Dependencies
      run: |
        cd Markdown2Video  # Asegurarse de estar en la carpeta correcta
        composer install --no-dev --optimize-autoloader  # Ejecuta composer dentro de la carpeta Markdown2Video

    - name: Create Release Package
      run: |
        cd Markdown2Video
        mkdir -p release
        zip -r release/project-${GITHUB_SHA}.zip . \
          -x "**/.git/*" \
          -x "**/node_modules/*" \
          -x "**/.DS_Store"

    - name: Create Git tag  # Estepaso debe estar alineado correctamente
      run: |
        cd Markdown2Video
        VERSION=$(jq -r .version < composer.json)  # Ahora jq funcionará porque el campo version está presente
        echo "Current Version: $VERSION"
    
        TAG="v${VERSION}"
    
        # Verifica si el tag ya existe en el remoto
        while git ls-remote --tags origin "$TAG" | grep -q "$TAG"; do
          echo "Tag $TAG already exists. Incrementing version."
          VERSION_INCREMENTED=$(echo $VERSION | awk -F. -v OFS=. '{$NF++;print}')
          TAG="v${VERSION_INCREMENTED}"
          VERSION=$VERSION_INCREMENTED  # Actualiza la versión para seguir incrementando 
          echo "New version with increment: $TAG"
        done
        echo "NAME=$TAG" >> $GITHUB_ENV
        # Crear el nuevo tag
        git tag $TAG
        git push origin $TAG

    - name: Publish Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ env.NAME }}
        name: "Release ${{ env.NAME }}"
        artifact: release/*.zip
        token: ${{ secrets.GH_TOKEN }}
        
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Upload app to S3
      run: |
        S3_BUCKET="elasticbeanstalk-${{ secrets.AWS_REGION }}-$(aws sts get-caller-identity --query Account --output text)"
        ZIP_FILE="Markdown2Video/release/project-${GITHUB_SHA}.zip"
        S3_KEY="releases/project-${GITHUB_SHA}.zip"
        aws s3 cp "$ZIP_FILE" "s3://$S3_BUCKET/$S3_KEY"

    - name: Create new Elastic Beanstalk application version
      run: |
        VERSION_LABEL="v-${{ github.run_number }}-${{ github.sha }}"
        S3_BUCKET="elasticbeanstalk-${{ secrets.AWS_REGION }}-$(aws sts get-caller-identity --query Account --output text)"
        S3_KEY="releases/project-${GITHUB_SHA}.zip"

        aws elasticbeanstalk create-application-version \
          --application-name "${{ secrets.EB_APP_NAME }}" \
          --version-label "$VERSION_LABEL" \
          --source-bundle S3Bucket=$S3_BUCKET,S3Key=$S3_KEY \
          --auto-create-application

    - name: Deploy new version to environment
      run: |
        VERSION_LABEL="v-${{ github.run_number }}-${{ github.sha }}"

        aws elasticbeanstalk update-environment \
          --environment-name "${{ secrets.EB_ENV_NAME }}" \
          --version-label "$VERSION_LABEL"
